/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode*>node_store1;
        queue<TreeNode*>node_store2;
        vector<vector<int>>goal;
        if(!root)return goal;
        TreeNode*curror=root;
        node_store1.push(root);
        while(!node_store1.empty()||!node_store2.empty())
        {
            if(node_store2.empty())
            {
                vector<int>t;
                while(!node_store1.empty())
                {
                    curror=node_store1.front();
                    t.push_back(curror->val);
                    if(curror->left)node_store2.push(curror->left);
                    if(curror->right)node_store2.push(curror->right);
                    node_store1.pop();
                }
                goal.push_back(t);
            }
            else
            {
                vector<int>t;
                while(!node_store2.empty())
                {
                    curror=node_store2.front();
                    t.push_back(curror->val);
                    if(curror->left)node_store1.push(curror->left);
                    if(curror->right)node_store1.push(curror->right);
                    node_store2.pop();
                }
                goal.push_back(t);
            }
        }
        return goal;
    }
};
