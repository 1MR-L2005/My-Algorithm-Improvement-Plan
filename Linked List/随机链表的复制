/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head)return NULL;
        Node*new_head=new Node(0);
        Node*curror1=new_head;
        Node*curror2=head;
        unordered_map<Node*,Node*>store_list;
        while(curror2)
        {
            Node*temp=new Node(0);
            temp->val=curror2->val;
            curror1->next=temp;
            store_list[curror2]=temp;
            curror1=curror1->next;
            curror2=curror2->next;
        }
        curror1->next=NULL;
        curror1=new_head->next;
        curror2=head;
        while(curror2)
        {
            if(!curror2->random)curror1->random=NULL;
            else
            {
                curror1->random=store_list[curror2->random];
            }
            curror1=curror1->next;
            curror2=curror2->next;
        }
        return new_head->next;
    }
};
